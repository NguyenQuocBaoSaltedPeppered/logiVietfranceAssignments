{
  "openapi": "3.0.0",
  "info": {
    "title": "Project Management LOGIVIETFRANCE",
    "description": "APIs for mangaging project lists of LOGIVIETFRANCE company",
    "contact": {
      "name": "LOGIVIETFRANCE JSC",
      "url": "https://www.logi-vietfrance.com/",
      "email": "didier.mercey@logi-vietfrance.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://virtserver.swaggerhub.com/nqbao2712/ProjectManagement/1.0.0",
      "description": "SwaggerHub API Auto Mocking"
    }
  ],
  "tags": [
    {
      "name": "admins",
      "description": "Secured Admin-only calls"
    },
    {
      "name": "developers",
      "description": "Operations available to regular developers"
    }
  ],
  "paths": {
    "/projects": {
      "get": {
        "tags": [
          "developers"
        ],
        "summary": "retrieve all projects",
        "description": "Retrieve all the suitable projects in the database.\n",
        "operationId": "getProjects",
        "parameters": [
          {
            "name": "Limit",
            "in": "query",
            "description": "maximum number of records to return",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 50,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "number of records to skip for pagination",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SearchString",
            "in": "query",
            "description": "pass an optional search string for looking up project by name",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SortBy",
            "in": "query",
            "description": "criteria for sorting",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "projectId",
              "enum": [
                "projectId",
                "projectName",
                "projectStartDate",
                "projectEndDate"
              ]
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "sorting method",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all the suitable project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfProjects"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "admins"
        ],
        "summary": "Create a new project",
        "description": "Create a new project using the input data of the request\n",
        "operationId": "createProject",
        "requestBody": {
          "description": "New project information.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Create successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseInfo"
                }
              }
            }
          },
          "409": {
            "description": "The project already existed in the system.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseInfo"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{id}": {
      "put": {
        "tags": [
          "developers"
        ],
        "summary": "Edit a project",
        "description": "Edit a project information using the input data in path and body\n",
        "operationId": "editProject",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The project id needs to be updated",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
            }
          }
        ],
        "requestBody": {
          "description": "New project information to be overwritten.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseInfo"
                }
              }
            }
          },
          "404": {
            "description": "Project Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseInfo"
                }
              }
            }
          },
          "409": {
            "description": "The project already existed in the system.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseInfo"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "admins"
        ],
        "summary": "Delete a project",
        "description": "Delete a project by its id\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The project id needs to be deleted",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseInfo"
                }
              }
            }
          },
          "404": {
            "description": "Project not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseInfo"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{id}/employees": {
      "post": {
        "tags": [
          "developers"
        ],
        "summary": "Add new employee of a project",
        "description": "Add new member to a project\n",
        "operationId": "addEmployeeForProject",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The project id needs to be added new employee",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
            }
          }
        ],
        "requestBody": {
          "description": "new employee information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeAddedInfo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "example": {
                  "error": 400,
                  "message": "Invalid input"
                }
              }
            }
          },
          "404": {
            "description": "Project not found",
            "content": {
              "application/json": {
                "example": {
                  "error": 404,
                  "message": "Project not found"
                }
              }
            }
          },
          "409": {
            "description": "Employee already existed in project phase",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseInfo"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Project": {
        "required": [
          "customerName",
          "description",
          "id",
          "projectName",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
          },
          "projectName": {
            "type": "string",
            "example": "eLogistics"
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "example": "2016-08-29T09:12:33.001Z"
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "example": "2016-09-29T09:12:33.001Z"
          },
          "projectPhases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectPhase"
            }
          }
        }
      },
      "ProjectDTO": {
        "required": [
          "customerName",
          "description",
          "projectName",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "projectName": {
            "type": "string",
            "example": "eLogistics"
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "example": "2016-08-29T09:12:33.001Z"
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "example": "2016-09-29T09:12:33.001Z"
          },
          "projectPhases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectPhase"
            }
          }
        }
      },
      "ProjectPhase": {
        "required": [
          "phaseCode",
          "phaseName",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "phaseName": {
            "type": "string",
            "enum": [
              "development",
              "testing",
              "maintenance"
            ]
          },
          "phaseCode": {
            "type": "string",
            "enum": [
              "DEV",
              "TEST",
              "MAINTAIN"
            ]
          },
          "startTime": {
            "type": "string",
            "format": "date-time",
            "example": "2016-08-29T09:12:33.001Z"
          },
          "endTime": {
            "type": "string",
            "format": "date-time",
            "example": "2016-08-29T09:12:33.001Z"
          },
          "employees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Employee"
            }
          }
        }
      },
      "Employee": {
        "required": [
          "id",
          "name",
          "role"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "E001"
          },
          "name": {
            "type": "string",
            "example": "Quyet"
          },
          "role": {
            "type": "string",
            "enum": [
              "Dev",
              "Tester",
              "Manager"
            ]
          }
        }
      },
      "EmployeeAddedInfo": {
        "required": [
          "id",
          "phaseCode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "E001"
          },
          "phaseCode": {
            "type": "string",
            "enum": [
              "DEV",
              "TEST",
              "MAINTAIN"
            ]
          }
        }
      },
      "PagingData": {
        "type": "object",
        "properties": {
          "currentPage": {
            "type": "number",
            "default": 1
          },
          "pageSize": {
            "type": "number",
            "default": 50
          },
          "totalRecords": {
            "type": "number",
            "example": 1000
          },
          "totalPages": {
            "type": "number",
            "example": 20
          }
        }
      },
      "ListOfProjects": {
        "type": "object",
        "properties": {
          "Data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Project"
            }
          },
          "Paging": {
            "$ref": "#/components/schemas/PagingData"
          }
        }
      },
      "ResponseInfo": {
        "type": "object",
        "properties": {
          "StatusCode": {
            "type": "number",
            "default": 200
          },
          "Message": {
            "type": "string",
            "description": "Message for the response"
          },
          "ResponseData": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      }
    }
  }
}